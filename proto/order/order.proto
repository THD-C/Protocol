syntax = "proto3";

package order;

import "order/order_status.proto";
import "order/order_type.proto";
import "order/order_side.proto";
import "google/protobuf/timestamp.proto";

service Order {
  rpc CreateOrder(OrderDetails) returns (OrderDetails);
  rpc DeleteOrder(OrderID) returns (OrderDetails);
  rpc GetOrder(OrderID) returns (OrderDetails);
  rpc GetOrders(OrderID) returns (OrderList);
  rpc GetOrderList(UserID) returns (OrderList);
  rpc UpdateOrder(OrderDetails) returns (OrderDetails);
}

// Represents a currency order placed by the user, such as buying or selling currency.
message OrderDetails {
  // Unique string ID of the order.
  string id = 1;

  // Foreign key referencing the User who placed the order.
  string user_id = 2;

  // Date when the order was created.
  google.protobuf.Timestamp date_created = 3;

  // Date when the order was executed.
  google.protobuf.Timestamp date_executed = 4;

  // Current status of the order.
  OrderStatus status = 5;

  // Amount of currency involved in the order.
  string nominal = 7;

  // Amount of cash involved in the order, can be NULL if irrelevant.
  string cash_quantity = 8;

  // Price per unit of currency, represented as a string for precision.
  string price = 9;

  // Type of the order (e.g., stop loss, take profit).
  OrderType type = 10;

  // Side of the order.
  OrderSide side = 11;

  //Wallet_id of crypto wallet
  string crypto_wallet_id = 12;

  //Wallet_id of Fiat currency wallet
  string fiat_wallet_id = 13;
}

message OrderID {
  // Unique string ID of the order to delete.
  string id = 1;
}

message UserID {
  // Unique string ID of the order to delete.
  string id = 1;
}

// Filters which can be applied to the list of orders.
message OrderFilter {
  // Owner's user_id.
  string user_id = 1;

  //Wallet_id of crypto or Fiat wallet
  string wallet_id = 2;
  
  // Status of the order to filter by.
  OrderStatus status = 3;

  // Type of the order to filter by.
  OrderType type = 4;

  // Side of the order to filter by.
  OrderSide side = 5;
}

// Represents a list of order messages.
message OrderList {
  // Repeated field containing multiple Order messages.
  repeated OrderDetails orders = 1;
}
