name: Compile protobuf

on:
  workflow_call:
    inputs:
      name:
        description: 'version'
        type: string
        required: true

permissions:
  contents: write

jobs:
  Compile:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Install protoc
      run: |
        sudo apt-get update
        sudo apt-get install -y protobuf-compiler

    - name: Compile protobuf
      shell: pwsh
      run: |
        ./build/New-ProtobufPackage.ps1 -Version "${{ github.event.inputs.name }}"

    - name: Get Release id for ${{ github.event.inputs.name }}
      shell: pwsh
      id: get-release
      env:
        VERSION: ${{ github.event.inputs.name }}
      run: |
        $r = Invoke-RestMethod -ContentType "application/json" -Headers @{
          "Accept"               = "application/vnd.github+json"
          "Authorization"        = "Bearer ${{ secrets.GITHUB_TOKEN }}"
          "X-GitHub-Api-Version" = "2022-11-28"
        } -Body $(
            @{
                "tag_name"               = "$($env:VERSION)"
                "name"                   = "$($env:VERSION) Release"
                "draft"                  = $false
                "prerelease"             = $false
                "generate_release_notes" = $false
            } | ConvertTo-Json
        ) -Uri "https://api.github.com/repos/${{ github.repository }}/releases/tags/$($env:VERSION)"
        
        Add-Content -Path $env:GITHUB_OUTPUT -Value "release_id=$($r.id)"

    - name: Create archive
      id: create-archive
      run: |
        archive_name="thdcgrpc.tar.gz"
        echo "archive_name=$archive_name" >> $GITHUB_OUTPUT
        tar -czf $archive_name ./thdcgrpc

    - name: Upload archive
      run: |
        curl -L -s --fail-with-body \
          -X POST \
          -H "Accept: application/vnd.github+json" \
          -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
          -H "X-GitHub-Api-Version: 2022-11-28" \
          -H "Content-Type: application/octet-stream" \
          --url "https://uploads.github.com/repos/${{ github.repository }}/releases/${{ steps.get-release.outputs.release_id }}/assets?name=${{ steps.create-archive.outputs.archive_name }}" \
          --data-binary "@${{ steps.create-archive.outputs.archive_name }}"

    - name: Remove archive from disk
      run: |
        rm ${{ steps.create-archive.outputs.archive_name }}